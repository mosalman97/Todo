{"version":3,"sources":["Components/assets/delete.svg","Components/assets/tick-green.svg","Components/assets/revert.svg","Components/assets/plus.svg","Components/ToDo.js","App.js","reportWebVitals.js","index.js"],"names":["ToDo","useState","id","title","tasks","setTasks","Completed","setCompleted","newTask","setNewTask","itemCount","setItemCount","useEffect","length","Container","Heading","ToDoContainer","Subheading","ToDolist","map","task","ListItem","LeftContainer","onClick","currentTask","find","new_list","filter","CompleteTask","CheckContainer","ItemContent","RightContainer","ActionButton","deleteTask","ButtonImage","src","require","default","alt","NewtodoForm","FormInput","placeholder","value","onChange","event","target","FormSubmitButton","e","preventDefault","new_task","prev","addNewTask","CheckContainerCompleted","TickImage","ItemContentCompleted","revertTask","deleteCompelted","styled","div","h1","h3","ul","li","span","button","img","form","input","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mGAAA,OAAe,cAA0B,oC,0ECAzC,OAAe,cAA0B,wC,gCCAzC,OAAe,cAA0B,oC,gCCAzC,OAAe,cAA0B,kC,iKCG1B,SAASA,IACtB,MAA0BC,mBAAS,CACjC,CACEC,GAAI,EACJC,MAAO,mBAET,CACED,GAAI,EACJC,MAAO,kBAET,CACED,GAAI,EACJC,MAAO,kBAXX,mBAAOC,EAAP,KAAcC,EAAd,KAcA,EAAkCJ,mBAAS,CACzC,CACEC,GAAI,EACJC,MAAO,qBAHX,mBAAOG,EAAP,KAAkBC,EAAlB,KAOA,EAA6BN,mBAAS,IAAtC,mBAAOO,EAAP,KAAeC,EAAf,KACA,EAAiCR,mBAAS,GAA1C,mBAAOS,EAAP,KAAiBC,EAAjB,KACAC,qBAAU,WACND,EAAaL,EAAUO,OAAOT,EAAMS,UACtC,IAmFF,OACE,eAACC,EAAD,WACE,cAACC,EAAD,wBACA,eAACC,EAAD,WACE,cAACC,EAAD,gCACA,cAACC,EAAD,UApDGd,EAAMe,KAAI,SAACC,GAAD,OACf,eAACC,EAAD,WACE,eAACC,EAAD,CAAeC,QAAS,kBAjBZ,SAACrB,GACjB,IAAIsB,EAAcpB,EAAMqB,MAAK,SAACL,GAAD,OAASA,EAAKlB,IAAMA,KACjDK,EAAa,GAAD,mBAAKD,GAAL,CAAekB,KAE3B,IAAIE,EAAWtB,EAAMuB,QAAO,SAACP,GAAD,OAASA,EAAKlB,KAAOA,KACjDG,EAASqB,GAYuBE,CAAaR,EAAKlB,KAA9C,UACE,cAAC2B,EAAD,IACA,eAACC,EAAD,WAAcV,EAAKlB,GAAnB,IAAwBkB,EAAKjB,YAE/B,cAAC4B,EAAD,UACE,cAACC,EAAD,CAAcT,QAAS,kBA/Bb,SAACrB,GAChB,IAAIwB,EAAWtB,EAAMuB,QAAO,SAACP,GAAD,OAASA,EAAKlB,KAAOA,KACjDG,EAASqB,GA6BuBO,CAAWb,EAAKlB,KAA3C,SACE,cAACgC,EAAD,CACEC,IAAKC,EAAQ,IAAmCC,QAChDC,IAAI,0BA8CZ,eAACC,EAAD,WACE,cAACC,EAAD,CACEC,YAAY,mBACZC,MAAOlC,EACPmC,SAAU,SAACC,GAAD,OAASnC,EAAWmC,EAAMC,OAAOH,UAE7C,cAACI,EAAD,CAAkBvB,QAAS,SAACwB,GAAD,OAhGhB,SAACH,GAChBA,EAAMI,iBACN,IAAIC,EAAW,CACX/C,GAAGQ,EAAU,EACbP,MAAMK,GAETH,EAAS,GAAD,mBAAKD,GAAL,CAAW6C,KACnBxC,EAAW,IACXE,GAAa,SAACuC,GAAD,OAAQA,EAAK,KAwFSC,CAAWJ,IAA3C,wBAIF,eAAC/B,EAAD,WACE,cAACC,EAAD,gCACA,cAACC,EAAD,UAjDGZ,EAAUa,KAAI,SAACC,GAAD,OACjB,eAACC,EAAD,WACA,eAACC,EAAD,WACE,cAAC8B,EAAD,UACE,cAACC,EAAD,CACElB,IAAKC,EAAQ,IAA2BC,QACxCC,IAAI,gBAGR,eAACgB,EAAD,WAAuBlC,EAAKlB,GAAIkB,EAAKjB,YAEvC,eAAC4B,EAAD,WACE,cAACC,EAAD,CAAcT,QAAS,kBAtCd,SAACrB,GAChB,IAAIsB,EAAclB,EAAUmB,MAAK,SAACL,GAAD,OAASA,EAAKlB,IAAMA,KACrDG,EAAS,GAAD,mBAAKD,GAAL,CAAWoB,KACnB,IAAIE,EAAWpB,EAAUqB,QAAO,SAACP,GAAD,OAAQA,EAAKlB,KAAOA,KACpDK,EAAamB,GAkCqB6B,CAAWnC,EAAKlB,KAA5C,SACE,cAACgC,EAAD,CACEC,IAAKC,EAAQ,IAAmCC,QAChDC,IAAI,aAGR,cAACN,EAAD,CAAcT,QAAS,kBAzDR,SAACrB,GACtB,IAAIwB,EAAWpB,EAAUqB,QAAO,SAACP,GAAD,OAASA,EAAKlB,KAAOA,KACrDK,EAAamB,GAuDoB8B,CAAgBpC,EAAKlB,KAAhD,SACE,cAACgC,EAAD,CACEC,IAAKC,EAAQ,IAAmCC,QAChDC,IAAI,8BAoClB,IAAMxB,EAAY2C,IAAOC,IAAV,2MAST3C,EAAU0C,IAAOE,GAAV,qHAMP3C,EAAgByC,IAAOC,IAAV,0BACbzC,EAAawC,IAAOG,GAAV,mEAIV1C,EAAWuC,IAAOI,GAAV,0BACRxC,EAAWoC,IAAOK,GAAV,iIAMRxC,EAAgBmC,IAAOC,IAAV,sEAIb7B,EAAiB4B,IAAOM,KAAV,uLASdjC,EAAc2B,IAAOM,KAAV,gDAGXhC,EAAiB0B,IAAOC,IAAV,0BACd1B,EAAeyB,IAAOO,OAAV,4KAUZ9B,EAAcuB,IAAOQ,IAAV,0BACX1B,EAAckB,IAAOS,KAAV,6VAOW9B,EAAQ,IAAiCC,SAY/DG,EAAYiB,IAAOU,MAAV,qLASTrB,EAAmBW,IAAOO,OAAV,kQAYhBZ,EAA0BK,YAAO5B,EAAP4B,CAAH,4HAMvBH,EAAuBG,YAAO3B,EAAP2B,CAAH,+CAGpBJ,EAAYI,IAAOQ,IAAV,0BC1OAG,MARf,WACE,OACE,qBAAKC,UAAU,MAAf,SACG,cAACrE,EAAD,OCMQsE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.3e2d2a67.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/delete.7c228be6.svg\";","export default __webpack_public_path__ + \"static/media/tick-green.b01db653.svg\";","export default __webpack_public_path__ + \"static/media/revert.74d21442.svg\";","export default __webpack_public_path__ + \"static/media/plus.19bbb341.svg\";","import React,{useState,useEffect} from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nexport default function ToDo() {\r\n  const [tasks, setTasks] = useState([\r\n    {\r\n      id: 1,\r\n      title: \"Buy 1 kg Tomato\",\r\n    },\r\n    {\r\n      id: 2,\r\n      title: \"Buy 2 Kg Onion\",\r\n    },\r\n    {\r\n      id: 3,\r\n      title: \"Visit Friend\",\r\n    },\r\n  ]);\r\n  const [Completed, setCompleted] = useState([\r\n    {\r\n      id: 5,\r\n      title: \"Washing Clothes\",\r\n    }\r\n  ]);\r\n  \r\n  const [newTask,setNewTask] = useState(\"\");\r\n  const [itemCount,setItemCount] = useState(0);\r\n  useEffect(()=>{\r\n      setItemCount(Completed.length+tasks.length)\r\n  },[])\r\n    \r\n  const addNewTask=(event)=>{\r\n    event.preventDefault();\r\n    let new_task = {\r\n        id:itemCount+1,\r\n        title:newTask,\r\n    };\r\n     setTasks([...tasks,new_task]);\r\n     setNewTask(\"\");\r\n     setItemCount((prev)=>prev+1)\r\n }\r\n const deleteTask = (id) =>{\r\n     let new_list = tasks.filter((task)=> task.id !== id);\r\n     setTasks(new_list)\r\n }\r\n const deleteCompelted = (id) =>{\r\n    let new_list = Completed.filter((task)=> task.id !== id);\r\n    setCompleted(new_list)\r\n}\r\n\r\nconst CompleteTask =(id)=>{\r\n    let currentTask = tasks.find((task)=> task.id == id);\r\n    setCompleted([...Completed,currentTask])\r\n    \r\n    let new_list = tasks.filter((task)=> task.id !== id);\r\n    setTasks(new_list)\r\n}\r\n\r\nconst revertTask = (id)=>{\r\n    let currentTask = Completed.find((task)=> task.id == id);\r\n    setTasks([...tasks,currentTask]);\r\n    let new_list = Completed.filter((task)=>task.id !== id)\r\n    setCompleted(new_list)\r\n}\r\n  const renderTasks = () => {\r\n    return tasks.map((task) => (\r\n      <ListItem>\r\n        <LeftContainer onClick={()=>CompleteTask(task.id)}>\r\n          <CheckContainer></CheckContainer>\r\n          <ItemContent>{task.id},{task.title}</ItemContent>\r\n        </LeftContainer>\r\n        <RightContainer>\r\n          <ActionButton onClick={()=>deleteTask(task.id)}>\r\n            <ButtonImage\r\n              src={require(\"../Components/assets/delete.svg\").default}\r\n              alt=\"Delete\"\r\n            />\r\n          </ActionButton>\r\n        </RightContainer>\r\n      </ListItem>\r\n    ));\r\n  };\r\n  \r\n  const renderCompleted = () => {\r\n    return Completed.map((task) => (\r\n        <ListItem>\r\n        <LeftContainer>\r\n          <CheckContainerCompleted>\r\n            <TickImage\r\n              src={require(\"./assets/tick-green.svg\").default}\r\n              alt=\"Tickgreen\"\r\n            />\r\n          </CheckContainerCompleted>\r\n          <ItemContentCompleted>{task.id}{task.title}</ItemContentCompleted>\r\n        </LeftContainer>\r\n        <RightContainer>\r\n          <ActionButton onClick={()=> revertTask(task.id)}  >\r\n            <ButtonImage\r\n              src={require(\"../Components/assets/revert.svg\").default}\r\n              alt=\"Revert\"\r\n            />\r\n          </ActionButton>\r\n          <ActionButton onClick={()=>deleteCompelted(task.id)}>\r\n            <ButtonImage\r\n              src={require(\"../Components/assets/delete.svg\").default}\r\n              alt=\"Delete\"\r\n            />\r\n          </ActionButton>\r\n        </RightContainer>\r\n      </ListItem>\r\n    ));\r\n  };\r\n  return (\r\n    <Container>\r\n      <Heading>ToDo List</Heading>\r\n      <ToDoContainer>\r\n        <Subheading>Things to be done</Subheading>\r\n        <ToDolist>\r\n          {renderTasks()}\r\n        </ToDolist>\r\n      </ToDoContainer>\r\n      <NewtodoForm>\r\n        <FormInput\r\n          placeholder=\"Type new Task...\"\r\n          value={newTask}\r\n          onChange={(event)=>setNewTask(event.target.value)}\r\n        />\r\n        <FormSubmitButton onClick={(e)=>addNewTask(e)}>\r\n          Add New\r\n        </FormSubmitButton>\r\n      </NewtodoForm>\r\n      <ToDoContainer>\r\n        <Subheading>Things to be done</Subheading>\r\n        <ToDolist>\r\n         {renderCompleted()}\r\n        </ToDolist>\r\n      </ToDoContainer>\r\n    </Container>\r\n  );\r\n}\r\n\r\nconst Container = styled.div`\r\n  width: 90%auto;\r\n  max-width: 1000px;\r\n  padding: 50px 10%;\r\n  border-left: 2px solid #f5f5f5;\r\n  border-right: 2px solid #f5f5f5;\r\n  margin: 0 auto;\r\n  min-height: 100vh;\r\n`;\r\nconst Heading = styled.h1`\r\n  font-size: 52px;\r\n  font-weight: bold;\r\n  text-align: center;\r\n  margin-bottom: 40px;\r\n`;\r\nconst ToDoContainer = styled.div``;\r\nconst Subheading = styled.h3`\r\n  font-size: 36px;\r\n  color: #050241;\r\n`;\r\nconst ToDolist = styled.ul``;\r\nconst ListItem = styled.li`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  margin-bottom: 20px;\r\n`;\r\nconst LeftContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n`;\r\nconst CheckContainer = styled.span`\r\n  width: 32px;\r\n  height: 32px;\r\n  border-radius: 50%;\r\n  border: 2px solid #050241;\r\n  display: inline-block;\r\n  margin-right: 15px;\r\n  cursor: pointer;\r\n`;\r\nconst ItemContent = styled.span`\r\n  font-size: 28px;\r\n`;\r\nconst RightContainer = styled.div``;\r\nconst ActionButton = styled.button`\r\n  border: none;\r\n  background: none;\r\n  cursor: pointer;\r\n  margin-right: 20px;\r\n  outline: none;\r\n  &:last-child {\r\n    margin-right: 0;\r\n  }\r\n`;\r\nconst ButtonImage = styled.img``;\r\nconst NewtodoForm = styled.form`\r\n  display: flex;\r\n  margin-left: 40px;\r\n  margin-top: 30px;\r\n  position: relative;\r\n  &::before {\r\n    content: \"\";\r\n    background-image: url(${require(\"../Components/assets/plus.svg\").default});\r\n    width: 16px;\r\n    height: 16px;\r\n    display: block;\r\n    position: absolute;\r\n    top: 0;\r\n    bottom: 0;\r\n    left: 10px;\r\n    margin: auto 0;\r\n    z-index: 2;\r\n  }\r\n`;\r\nconst FormInput = styled.input`\r\n  display: block;\r\n  outline: none;\r\n  width: 100%;\r\n  border: 1px solid #c6c6c6;\r\n  border-right: none;\r\n  padding: 0 10px 0 35px;\r\n  font-size: 22px;\r\n`;\r\nconst FormSubmitButton = styled.button`\r\n  padding: 15px 25px;\r\n  white-space: nowrap;\r\n  border: none;\r\n  background: #050241;\r\n  color: #fff;\r\n  cursor: pointer;\r\n  border-radius: 6px;\r\n  border-top-left-radius: 0;\r\n  border-bottom-left-radius: 0;\r\n  font-size: 24px;\r\n`;\r\nconst CheckContainerCompleted = styled(CheckContainer)`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  border-color: #06c692;\r\n`;\r\nconst ItemContentCompleted = styled(ItemContent)`\r\n  color: #06c692;\r\n`;\r\nconst TickImage = styled.img``;\r\n","import './App.css';\nimport ToDo from '../src/Components/ToDo'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n       <ToDo/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}